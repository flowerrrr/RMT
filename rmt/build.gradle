apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
// LÃ¤uft nicht mit Java 11
// apply plugin: 'jacoco'
apply plugin: 'war'


// use jdk 1.7
sourceCompatibility = "1.7"

repositories {
    mavenCentral()
    maven {
        url "http://maven.springframework.org/milestone"
        name "Spring Maven MILESTONE Repository"
    }
}

// version properties
project.ext.versions = [
        commons_collection: "3.2.1",
        groovy            : "2.4.21",
        hibernate         : "3.6.7.Final",
        slf4j             : "1.6.4",
        spring            : "3.2.18.RELEASE",
        spring_security   : "3.2.10.RELEASE",
        wicket            : "1.5.7",
]

configurations {
    provided
    querydslAnnotationProcessor
    hibernateAnnotationProcessor

    all {
        //   Define how to handle dependency conflicts
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            // failOnVersionConflict()

            force "commons-collections:commons-collections:" + versions.commons_collection
            force "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final"
            force "org.springframework:spring-aop:" + versions.spring
            force "org.springframework:spring-beans:" + versions.spring
            force "org.springframework:spring-context:" + versions.spring
            force "org.springframework:spring-core:" + versions.spring
            force "org.springframework:spring-expression:" + versions.spring
            force "org.springframework:spring-jdbc:" + versions.spring
            force "org.springframework:spring-tx:" + versions.spring
            force "org.slf4j:slf4j-api:" + versions.slf4j
            force "org.slf4j:jcl-over-slf4j:" + versions.slf4j
            force "junit:junit:4.13.2" // included in dbunit and testng with different versions
        }
    }

}

dependencies {
    compile(
            'c3p0:c3p0:0.9.1.2',
            'ch.qos.logback:logback-classic:1.0.3',
            'com.google.code.gson:gson:1.7.2',
            'com.google.guava:guava:11.0.2',
            'com.mysema.querydsl:querydsl-jpa:2.5.0',
            'com.thoughtworks.xstream:xstream:1.4.1',
            'commons-beanutils:commons-beanutils:1.8.3',
            'commons-collections:commons-collections:' + versions.commons_collection,
            'javax.annotation:javax.annotation-api:1.3.2',
            'javax.mail:mail:1.4.4',
            "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2",
            "org.glassfish.jaxb:jaxb-runtime:2.3.2",
            'joda-time:joda-time:2.0',
            'joda-time:joda-time-hibernate:1.3',
            'org.apache.commons:commons-lang3:3.0.1',
            'org.apache.httpcomponents:httpclient:4.1.2',
            'org.apache.velocity:velocity:1.7',
            'org.apache.wicket:wicket-core:' + versions.wicket,
            'org.apache.wicket:wicket-extensions:' + versions.wicket,
            'org.apache.wicket:wicket-spring:' + versions.wicket,
            'org.apache.wicket:wicket-datetime:' + versions.wicket,
            'org.apache.wicket:wicket-devutils:' + versions.wicket,
            'org.hibernate:hibernate-core:' + versions.hibernate,
            'org.hibernate:hibernate-validator:4.2.0.Final',
            'org.hibernate:hibernate-entitymanager:' + versions.hibernate,
            'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
            'org.joda:joda-convert:1.1',
            'org.jsoup:jsoup:1.6.3',
            'org.projectlombok:lombok:1.18.26',
            'org.springframework:spring-context:' + versions.spring,
            'org.springframework:spring-context-support:' + versions.spring,
            'org.springframework:spring-core:' + versions.spring,
            'org.springframework:spring-webmvc:' + versions.spring,
            'org.springframework.data:spring-data-jpa:1.2.0.RELEASE',
            'org.springframework.security:spring-security-config:' + versions.spring_security,
            'org.springframework.security:spring-security-web:' + versions.spring_security
    )
    providedCompile(
            'javax.servlet:javax.servlet-api:3.1.0',
    )
//    hibernateAnnotationProcessor (
//          //  'org.hibernate:hibernate-jpamodelgen:1.1.1.Final',
//    )
    querydslAnnotationProcessor(
            'com.mysema.querydsl:querydsl-apt:2.5.0',
    )
    runtime(
            'com.h2database:h2:1.3.160',
            'mysql:mysql-connector-java:8.0.33',
            'org.slf4j:jcl-over-slf4j:' + versions.slf4j
    )
    provided(
            // to be able to debug into tomcat code.
            'org.apache.tomcat:tomcat-catalina:9.0.78',
            'org.apache.tomcat:tomcat-util:9.0.78',
            'org.apache.tomcat:tomcat-coyote:9.0.78',
            // to have code examples right at hand
            'org.odlabs.wiquery:wiquery-core:' + versions.wicket,
            'org.odlabs.wiquery:wiquery-jquery-ui:' + versions.wicket,
    )
    testCompile(
            'org.springframework:spring-test:' + versions.spring,
            'org.dbunit:dbunit:2.4.8',
            'org.codehaus.groovy:groovy-all:' + versions.groovy,
            'org.testng:testng:6.1.1', // 6.5.1 has issues with idea test runner /always reports success
            'org.mockito:mockito-core:1.9.0-rc1',
            'org.codehaus.groovy:groovy-all:' + versions.groovy,
    )
}

// wicket app: need to copy .html files from java-src to output
sourceSets.main.resources.srcDirs('src/main/java')
sourceSets.test.resources.srcDirs('src/test/java')
sourceSets.test.resources.srcDirs('src/test/groovy')

// add directory with db-unit files to test-classpath
sourceSets.test.resources.srcDirs('src/test/database')


// needed to get querydsl preprocessor executed
// s. http://gradle.1045684.n5.nabble.com/Javac-Java-Annotation-Processor-Maven-classpath-dependencies-in-Gradle-td4626751.html
sourceSets {
    queryDsl {
        java {
            srcDir 'src/main/java'
        }
    }
}
compileQueryDslJava.destinationDir = file('src/generated/querydsl')

compileJava.classpath += configurations.hibernateAnnotationProcessor
compileJava.dependsOn compileQueryDslJava
clean.dependsOn cleanCompileQueryDslJava

sourceSets.main.java.srcDirs(compileQueryDslJava.destinationDir)

compileQueryDslJava {
    doFirst {
        println "Generating QueryDSL sources";
        println "Destination dir: " + destinationDir.absolutePath
    }
    options.compilerArgs = [
            "-processor", "com.mysema.query.apt.hibernate.HibernateAnnotationProcessor",
            "-proc:only",
            "-s", "${destinationDir.absolutePath}".toString()
    ]
    classpath += configurations.compile + configurations.querydslAnnotationProcessor
}

// needed for some unit tests that use umlaute in asserted strings.
[compileJava, compileTestJava, compileGroovy, compileTestGroovy]*.options*.encoding = 'UTF-8'

test {
    useTestNG()
    // include '**/EventDetailsPanelTest.*'
    exclude '**/*ManualTest.*'
    // must use gradle -i to see test output
    // testLogging.showStandardStreams = true
    //listening to test execution events
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}
// http://forums.gradle.org/gradle/topics/_1_6_rc_1_jacoco_plugin_does_not_show_line_numbers
//jacocoTestReport {
//  group = "Reporting"
//  description = "Generate Jacoco coverage reports after running tests."
//  additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
//}

/**
 * When building war for docker-image use
 *     gradle war -Ptarget=docker
 */
def targetEnv = project.hasProperty('target') ? project.getProperty('target') : 'prod'
println "Using target env: " + targetEnv

war {
    baseName = targetEnv == 'docker' ? 'das-tool-docker' : 'das-tool'
    from("src/main/resources-target/${targetEnv}") {
        include '*.*'
        into 'WEB-INF/classes'
    }
}

/**
 * Use this task to update idea project file with dependencies.
 * It will remove existing dependencies before updating them.
 */
idea.module {
    downloadJavadoc = true
    downloadSources = true
    iml {
        beforeMerged { module ->
            module.dependencies.clear()
        }
    }
}

// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions {
    doLast {
        def checked = [:]
        allprojects {
            configurations.each { configuration ->
                configuration.allDependencies.each { dependency ->
                    def version = dependency.version
                    if (!version.contains('SNAPSHOT') && !checked[dependency]) {
                        def group = dependency.group
                        def path = group.replace('.', '/')
                        def name = dependency.name
                        def url = "https://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                        try {
                            def metadata = new XmlSlurper().parseText(url.toURL().text)
                            def versions = metadata.versioning.versions.version.collect { it.text() }
                            versions.removeAll { it.toLowerCase().contains('alpha') }
                            versions.removeAll { it.toLowerCase().contains('beta') }
                            versions.removeAll { it.toLowerCase().contains('rc') }
                            def newest = versions.max()
                            if (version != newest) {
                                println "$group:$name $version -> $newest"
                            }
                        } catch (FileNotFoundException e) {
                            logger.debug "Unable to download $url: $e.message"
                        } catch (org.xml.sax.SAXParseException e) {
                            logger.debug "Unable to parse $url: $e.message"
                        }
                        checked[dependency] = true
                    }
                }
            }
        }
    }
}
